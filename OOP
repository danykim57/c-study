C++ Object Oriented Programming.

OOP came out around 1980s for better use of codes including variables and functions.

C had struct which was only used for a business card form.

There is no action, behavior, or event in struct unlike class.

Class is a blueprint and object is an actual product(e.g house) based on the blueprint.

Class has member variable, member function, non-member function, constructor, destructor, etc.

member variable can be either public or private.

Public member variable can be accessed and modified by codes from any other places,

but private member variable only can be accessed or modified by codes inside the class.

**This is the reason why we need to make accessor(getter) and mutator(setter).

In default, it is highly recommended to make all members in private to prevent any misuses of the class by other users.

member function can acceses or modify member variable, but it is recommended to use non-member function as accessor or mutator for the most times.

function can be overloaded (can have same name but with different parameters)

function can have class type parameter.

function may return object.


Constructor is base setting that all objects share under the class.

There can be multiple constructors in the class.

Automatically, compiler create constructor without any parameter.

If there is a specifically defined constructor without any parameter, then compiler use the defined one.



Big 3 solution[Destructor, Copy object, Deep copy] for memory leak.

Any dynamic array or manually handled or invoked memory must be destroyed as the designer created.

When it comes to reassign the memory, all 3 solutions must come together.

There is no case that only one or two are used.

e.g)
class Elephant {
	int* arr;
	int count;
	int capacity;
public:
	Elephant() : arr(new int[200000000]), count(0), capacity(200000000) {}
	~Elephant() { delete[] arr; }
	Elephant(const Elephant& rhs) : arr(new int[200000000]), count(0), capacity(200000000)
	{ *this = rhs; }
	Elephant& operator=(const Elephant& rhs); //must be a member of the class
};


//new account balance = old balance + all deposits - all cashed checks

#include<iostream>
#include<string>
#include<vector>
using namespace std;


class Money {
public:
	double all_cents;
public:
	friend Money operator+(const Money& amount1, const Money& amount2);

	friend Money operator-(const Money& amount1, const Money& amount2);

	Money operator-(const Money& amount) const;

	friend bool operator==(const Money& amoun1, const Money& amount2);

	friend bool operator<(const Money& amount1, const Money& amount2);

	Money(double all_cents) : all_cents(all_cents) {}

	Money();

	double get_value() const { return all_cents; }
	friend istream& operator>>(istream& ins, Money& amount);

	friend ostream& operator<<(ostream& outs, const Money& amount);
};

Money operator+(const Money& amount1, const Money& amount2) { Money temp(amount1.get_value() + amount2.get_value()); return temp; }

Money operator-(const Money& amount1, const Money& amount2) { Money temp(amount1.get_value() - amount2.get_value()); return temp; }

Money Money::operator-(const Money& amount) const {
	Money temp(all_cents - amount.get_value());
	return temp;
}

bool operator==(const Money& amount1, const Money& amount2) { return amount1.get_value() == amount2.get_value(); }

bool operator<(const Money& amount1, const Money& amount2) { return amount1.get_value() < amount2.get_value(); }


ostream& operator<<(ostream& outs, const Money& amount) {
	outs << amount.get_value() << "\"";
	return outs;
}

class Check {
	int id;
	bool isCheckCashed = false;
	Money amount;

	Check() : id(1), isCheckCashed(false), amount(0){}
	Check(int numCheck, bool isCheckCashed, Money amount) : id(numCheck), isCheckCashed(isCheckCashed), amount(amount) {}

public:
	int getId() {return id;}
	void setId(int newId) { id = newId; }
	Money getTotal(const Money& amount) { return this->amount.get_value(); }
	void setTotal(const Money& amount);
	bool isChecked() { return isCheckCashed; }
    void setIsChecked(char num) { isCheckCashed = num; }
	friend Check operator<(const Check& one, const Check& other);
	friend istream& operator>>(istream& ins, Check& check);
};
void Check::setTotal(const Money& amount) {
	this->amount = amount;
}

istream& operator>>(istream& ins, Check& check) {
	char one_char, cashed;
	double all_cents = 0;
	bool negative = false;;

	ins >> one_char;
	check.setId(one_char);

	ins >> one_char;
	ins >> one_char;
	if (one_char == '-')
	{
		negative = true;
		ins >> one_char;
	}

	else
		ins >> one_char; //skip '$'
		ins >> all_cents;
	check.amount.all_cents = all_cents;
	if (negative)
	check.amount.all_cents = -all_cents;

	ins >> cashed;

	check.setIsChecked(cashed);

	return ins;
}


int main() {
	double all_cents;
	int numOfDeposits;
	vector<string> deposits;
	string deposit;
	double doubleDeposit;
	string inCheck;
	int numChecks;
	vector<string> temp;
	vector<Check> checks;
	Check check();
	
	cout << "Please enter your current bank balance ($##.##): " << endl;
	//$50.00
	cin >> all_cents;
	
	Money newBalance(all_cents);
	cout << "Please enter your old bank balance ($##.##): " << endl;
	//$32.00
	cin >> all_cents;
	Money oldBalance(all_cents);
	cout << "Please enter how many deposits you have (#): " << endl;
	// 5
	cin >> numOfDeposits;
	cout << "Please enter deposits, one per line ($##.##): " << endl;
	/*
	$3.23
	$32.42
	$11.42
	-$31.41
	$14.23
	*/
	for (int i = 0; i < numOfDeposits; i++) {
		cin >> deposit;
		if (deposit[0] == '$') {
			deposit.erase(remove(deposit.begin(), deposit.end(), '$'), deposit.end());
		}
		doubleDeposit = stod(deposit);
		deposits.push_back(deposit);
	}
	cout << "Please enter how many checks you have for processing (#): " << endl;
	//2
	cin >> numChecks;
	cout << "Please enter checks, one per line." << endl;

	for (int i = 0; i < numChecks; i++) {
		operator>>amount
	}

	cout << "Format is (# $##.## #)." << endl;

	cout << "Where first number is id, second is amount, third is a 0 if not cashed, 1 if cashed." << endl;
	//3 $13.31 0
	//4 $20.30 1




	cout << "Total value of checks cashed: " << endl;
	//$20.30
	cout << "Total value of all deposits made: " << endl;
	//$29.89
	cout << "New balance should be: " << endl;
	//$41.59
	cout << "Difference from bank balance is: " << endl;
	//$8.41
	cout << "List of all cashed checks: " << endl;

	cout << "Id \t Amount \t Cashed status" << endl;
	//4 \t $20.30 \t 1
	cout << "List of all non-cashed checks:" << endl;

	cout << "Id \t Amount \t Cashed status" << endl;
	//3 \t $13.31 \t 0

}

**TODO add more example codes and details later
